[tool.poetry]
name = "menagerie"
version = "0.1.0"
description = ""
authors = ["Nick Wall <46641379+walln@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
torch = "^2.1.2"
torchvision = "^0.16.2"
torchsummary = "^1.5.1"
datasets = "^2.16.1"
tqdm = "^4.66.1"
loguru = "^0.7.2"
lightning = "^2.1.3"
torchmetrics = "^1.2.1"
albumentations = "^1.3.1"
rich = "^13.7.0"
wandb = "^0.16.2"
typer = {version = "^0.9.0", extras = ["all"]}
transformers = "^4.36.2"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.6.0"
ruff = "^0.1.11"
pytest = "^7.4.4"
nvitop = "^1.3.2"
jupyter = "^1.0.0"
ipykernel = "^6.28.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
src = ["menagerie", "tests"]
pydocstyle.convention = "google"

# See all rules at https://docs.astral.sh/ruff/rules/
select = [
    "E",      # pycodestyle
    "W",      # pycodestyle
    "F",      # Pyflakes
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # pydocstyle
    "I",      # isort
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "PT",     # flake8-pytest-style
    "RUF",    # Ruff-specific rules
    "FBT001", # flake8-boolean-trap
]

ignore = [
    "E501", # "Line too long"
    # -> line length already regulated by the formatter
    "SIM102", # "Use a single `if` statement instead of nested `if` statements"
    # -> too restrictive
]